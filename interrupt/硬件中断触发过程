硬件生成中断并传递到CPU
以下是一个简化的示例，展示硬件生成中断并传递到CPU的过程：
1
硬件设备生成中断：
键盘按键按下，键盘控制器生成中断信号，并发送到PIC的IRQ1线。
2
PIC处理中断：
PIC接收到IRQ1信号，根据优先级处理中断请求。
PIC将IRQ1转换为中断向量0x21，并发送到CPU的INTR引脚。
3
CPU处理中断：
CPU接收到INTR信号，保存当前执行上下文。
CPU进入内核态，从中断向量表中查找中断向量0x21对应的中断处理程序入口地址。
CPU跳转到中断处理程序入口地址，执行中断处理逻辑。
中断处理程序执行完毕后，CPU恢复之前保存的执行上下文，返回到中断发生前的状态。

############################################################################################################
比如键盘ctrl+c，系统怎么触发中断的全过程


bot
当用户在键盘上按下 Ctrl+C 时，系统会触发一个中断，最终导致操作系统发送一个 SIGINT 信号给前台进程。以下是详细的步骤说明，展示了从按下 Ctrl+C 到触发中断并处理的全过程。

1. 键盘硬件生成中断信号
按键事件：

用户按下 Ctrl 键和 C 键。
键盘控制器检测到按键事件，并生成相应的扫描码。
发送扫描码：

键盘控制器将扫描码通过键盘接口发送到计算机的键盘控制器芯片（如Intel 8042）。
2. 键盘控制器处理中断
生成中断信号：

键盘控制器芯片接收到扫描码后，生成一个中断信号，并将信号发送到中断控制器（如PIC或APIC）。
中断请求：

中断控制器接收到键盘控制器的中断请求（通常是IRQ1），并将其转换为中断向量（在x86系统中通常是中断向量0x21）。
3. CPU响应中断
中断响应：

CPU接收到中断信号后，停止当前正在执行的指令，保存当前的执行上下文（如程序计数器、寄存器等）。
CPU进入内核态，并从中断向量表中查找中断向量0x21对应的中断处理程序入口地址。
执行中断处理程序：

CPU跳转到中断处理程序入口地址，执行中断处理逻辑。
4. 操作系统中断处理
中断处理程序：

操作系统内核的中断处理程序（ISR）开始执行。对于键盘中断，ISR会读取键盘控制器的状态寄存器和数据寄存器，以获取按键的扫描码。
ISR将扫描码转换为对应的键值，并将其放入键盘缓冲区。
调度下半部处理：

ISR完成基本的中断处理后，可能会调度下半部处理程序（如软中断或任务队列）来处理更复杂的任务。
5. 终端处理
终端驱动程序：

终端驱动程序从键盘缓冲区读取键值，并进行处理。
当检测到 Ctrl+C 组合键时，终端驱动程序会生成一个 SIGINT 信号。
发送信号：

终端驱动程序将 SIGINT 信号发送给前台进程（通常是正在运行的命令行程序）。
6. 用户进程处理信号
信号处理：
前台进程接收到 SIGINT 信号后，会执行相应的信号处理程序。
默认情况下，SIGINT 信号会导致进程终止。
